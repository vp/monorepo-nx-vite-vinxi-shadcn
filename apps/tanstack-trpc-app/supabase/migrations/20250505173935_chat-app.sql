CREATE SCHEMA chat_app;

GRANT USAGE ON SCHEMA chat_app TO anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA chat_app TO anon, authenticated, service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA chat_app TO anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA chat_app TO anon, authenticated, service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA chat_app GRANT ALL ON TABLES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA chat_app GRANT ALL ON ROUTINES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA chat_app GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;

--
-- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone

-- Custom types
create type chat_app.app_permission as enum ('channels.delete', 'messages.delete');
create type chat_app.app_role as enum ('admin', 'moderator');
create type chat_app.user_status as enum ('ONLINE', 'OFFLINE');

-- USERS
create table chat_app.users (
  id          uuid not null primary key, -- UUID from auth.users
  username    text,
  status      user_status default 'OFFLINE'::chat_app.user_status
);
comment on table chat_app.users is 'Profile data for each user.';
comment on column chat_app.users.id is 'References the internal Supabase Auth user.';

-- CHANNELS
create table chat_app.channels (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  slug          text not null unique,
  created_by    uuid references chat_app.users not null
);
comment on table chat_app.channels is 'Topics and groups.';

-- MESSAGES
create table chat_app.messages (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  message       text,
  user_id       uuid references chat_app.users not null,
  channel_id    bigint references chat_app.channels on delete cascade not null
);
comment on table chat_app.messages is 'Individual messages sent by each user.';

-- USER ROLES
create table chat_app.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references chat_app.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table chat_app.user_roles is 'Application roles for each user.';

-- ROLE PERMISSIONS
create table chat_app.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table chat_app.role_permissions is 'Application permissions for each role.';

-- authorize with role-based access control (RBAC)
create function chat_app.authorize(
  requested_permission app_permission,
  user_id uuid
)
returns boolean as
$$
  declare
    bind_permissions int;
  begin
    select
      count(*)
    from chat_app.role_permissions
    inner join chat_app.user_roles on role_permissions.role = user_roles.role
    where
      role_permissions.permission = authorize.requested_permission and
      user_roles.user_id = authorize.user_id
    into bind_permissions;

    return bind_permissions > 0;
  end;
$$
language plpgsql security definer;

-- Secure the tables
alter table chat_app.users
  enable row level security;
alter table chat_app.channels
  enable row level security;
alter table chat_app.messages
  enable row level security;
alter table chat_app.user_roles
  enable row level security;
alter table chat_app.role_permissions
  enable row level security;

create policy "Allow logged-in read access" on chat_app.users
  for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on chat_app.users
  for insert with check ((select auth.uid()) = id);
create policy "Allow individual update access" on chat_app.users
  for update using ( (select auth.uid()) = id );
create policy "Allow logged-in read access" on chat_app.channels
  for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on chat_app.channels
  for insert with check ((select auth.uid()) = created_by);
create policy "Allow individual delete access" on chat_app.channels
  for delete using ((select auth.uid()) = created_by);
create policy "Allow authorized delete access" on chat_app.channels
  for delete using (authorize('channels.delete', auth.uid()));
create policy "Allow logged-in read access" on chat_app.messages
  for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on chat_app.messages
  for insert with check ((select auth.uid()) = user_id);
create policy "Allow individual update access" on chat_app.messages
  for update using ((select auth.uid()) = user_id);
create policy "Allow individual delete access" on chat_app.messages
  for delete using ((select auth.uid()) = user_id);
create policy "Allow authorized delete access" on chat_app.messages
  for delete using (authorize('messages.delete', auth.uid()));
create policy "Allow individual read access" on chat_app.user_roles
  for select using ((select auth.uid()) = user_id);

-- Send "previous data" on change
alter table chat_app.users
  replica identity full;
alter table chat_app.channels
  replica identity full;
alter table chat_app.messages
  replica identity full;

-- inserts a row into chat_app.users and assigns roles
create function chat_app.handle_new_user()
returns trigger
set search_path = ''
as $$
  declare is_admin boolean;
  begin
    insert into chat_app.users (id, username)
    values (new.id, new.email);

    select count(*) = 1 from auth.users into is_admin;

    if position('+supaadmin@' in new.email) > 0 then
      insert into chat_app.user_roles (user_id, role) values (new.id, 'admin');
    elsif position('+supamod@' in new.email) > 0 then
      insert into chat_app.user_roles (user_id, role) values (new.id, 'moderator');
    end if;

    return new;
  end;
$$ language plpgsql security definer;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure chat_app.handle_new_user();

/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on chat_app tables.
 */

begin;
  -- remove the realtime chat_appation
  drop chat_appation if exists supabase_realtime;

  -- re-create the chat_appation but don't enable it for any tables
  create chat_appation supabase_realtime;
commit;

-- add tables to the chat_appation
alter chat_appation supabase_realtime add table chat_app.channels;
alter chat_appation supabase_realtime add table chat_app.messages;
alter chat_appation supabase_realtime add table chat_app.users;

-- DUMMY DATA
insert into chat_app.users (id, username)
values
    ('8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e', 'supabot');

insert into chat_app.channels (slug, created_by)
values
    ('chat_app', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),
    ('random', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');

insert into chat_app.messages (message, channel_id, user_id)
values
    ('Hello World ðŸ‘‹', 1, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),
    ('Perfection is attained, not when there is nothing more to add, but when there is nothing left to take away.', 2, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');

insert into chat_app.role_permissions (role, permission)
values
    ('admin', 'channels.delete'),
    ('admin', 'messages.delete'),
    ('moderator', 'messages.delete');