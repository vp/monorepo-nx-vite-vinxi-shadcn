create table todolists (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    title text check (char_length(title) > 1),
    description text,
    inserted_at timestamp with time zone default timezone ('utc'::text, now()) not null
);

create table todos (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    task text check (char_length(task) > 3),
    todolist_id bigint references todolists (id) not null,
    is_complete boolean default false,
    inserted_at timestamp with time zone default timezone ('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for insert
with
    check (auth.uid () = user_id);

create policy "Individuals can view their own todos. " on todos for
select using (auth.uid () = user_id);

create policy "Individuals can update their own todos." on todos
for update
    using (auth.uid () = user_id);

create policy "Individuals can delete their own todos." on todos for delete using (auth.uid () = user_id);

alter table todos enable row level security;

-- Enable row level security on todolists
alter table todolists enable row level security;

-- Create RLS policies similar to todos table
create policy "Individuals can create todolists." on todolists for
    insert with check (auth.uid() = user_id);

create policy "Individuals can view their own todolists." on todolists for
    select using (auth.uid() = user_id);

create policy "Individuals can update their own todolists." on todolists for
    update using (auth.uid() = user_id);

create policy "Individuals can delete their own todolists." on todolists for
    delete using (auth.uid() = user_id);

-- Create index for faster lookups
create index todos_todolist_id_idx on todos(todolist_id);

-- Create a function to delete todolist with associated todos in a transaction
CREATE OR REPLACE FUNCTION delete_todolist_with_todos(todolist_id bigint)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Delete associated todos first
  DELETE FROM todos WHERE todolist_id = $1;
  
  -- Then delete the todolist
  DELETE FROM todolists WHERE id = $1;
  
  RETURN json_build_object('success', true);
EXCEPTION 
  WHEN OTHERS THEN
    RETURN json_build_object('success', false, 'error', SQLERRM);
END;
$$;